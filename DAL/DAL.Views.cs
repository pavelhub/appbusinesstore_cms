//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.225
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets8396D75ACA4241EE9F49A0C2C04E9FD87C453B6C5E00E5890AD3B02F45A2A8C9))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// Тип содержит представления для наборов EntitySets и AssociationSets, созданные во время разработки.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets8396D75ACA4241EE9F49A0C2C04E9FD87C453B6C5E00E5890AD3B02F45A2A8C9 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// Конструктор хранит представления для экстентов и значения хэша, созданные на основе замыканий и представлений метаданных и сопоставлений.
        /// </Summary>
        public ViewsForBaseEntitySets8396D75ACA4241EE9F49A0C2C04E9FD87C453B6C5E00E5890AD3B02F45A2A8C9()
        {
            this.EdmEntityContainerName = "DALContext";
            this.StoreEntityContainerName = "DALStoreContainer";
            this.HashOverMappingClosure = "5fa0e42b14894a82194d818eee9c7339b7791dd1273d9f3f42ed0540e3b8efbd";
            this.HashOverAllExtentViews = "3b94f9aa055dc6ac65a36b4f72f0d49a9b34f8aaa98734162cd52e23f5c8a5aa";
            this.ViewCount = 22;
        }
        
        /// <Summary>
        /// Метод возвращает представление для указанного индекса.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.application
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.application", @"
    SELECT VALUE -- Constructing application
        [DAL.Store.application](T1.application_id, T1.[application.app_name], T1.[application.is_active], T1.[application.demo_password], T1.[application.owner_id], T1.[application.server_timestamp])
    FROM (
        SELECT 
            T.id AS application_id, 
            T.app_name AS [application.app_name], 
            T.is_active AS [application.is_active], 
            T.demo_password AS [application.demo_password], 
            T.owner_id AS [application.owner_id], 
            T.server_timestamp AS [application.server_timestamp], 
            True AS _from0
        FROM DALContext.application AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.skins
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.skins", "\r\n    SELECT VALUE -- Constructing skins\r\n        [DAL.Store.skins](T1.skins_id, " +
                    "T1.[skins.app_id], T1.[skins.skin_name], T1.[skins.application_color], T1.[skins" +
                    ".application_bg_color_start], T1.[skins.application_bg_color_end], T1.[skins.app" +
                    "lication_text_color], T1.[skins.list_bg_color_start], T1.[skins.list_bg_color_en" +
                    "d], T1.[skins.list_alt_bg_color_start], T1.[skins.list_alt_bg_color_end], T1.[sk" +
                    "ins.list_bg_opacity], T1.[skins.list_text_color], T1.[skins.list_alt_text_color]" +
                    ", T1.[skins.content_bg_color_start], T1.[skins.content_bg_color_end], T1.[skins." +
                    "content_text_color], T1.[skins.content_text_size], T1.[skins.server_timestamp])\r" +
                    "\n    FROM (\r\n        SELECT \r\n            T.id AS skins_id, \r\n            T.app_" +
                    "id AS [skins.app_id], \r\n            T.skin_name AS [skins.skin_name], \r\n        " +
                    "    T.application_color AS [skins.application_color], \r\n            T.applicatio" +
                    "n_bg_color_start AS [skins.application_bg_color_start], \r\n            T.applicat" +
                    "ion_bg_color_end AS [skins.application_bg_color_end], \r\n            T.applicatio" +
                    "n_text_color AS [skins.application_text_color], \r\n            T.list_bg_color_st" +
                    "art AS [skins.list_bg_color_start], \r\n            T.list_bg_color_end AS [skins." +
                    "list_bg_color_end], \r\n            T.list_alt_bg_color_start AS [skins.list_alt_b" +
                    "g_color_start], \r\n            T.list_alt_bg_color_end AS [skins.list_alt_bg_colo" +
                    "r_end], \r\n            T.list_bg_opacity AS [skins.list_bg_opacity], \r\n          " +
                    "  T.list_text_color AS [skins.list_text_color], \r\n            T.list_alt_text_co" +
                    "lor AS [skins.list_alt_text_color], \r\n            T.content_bg_color_start AS [s" +
                    "kins.content_bg_color_start], \r\n            T.content_bg_color_end AS [skins.con" +
                    "tent_bg_color_end], \r\n            T.content_text_color AS [skins.content_text_co" +
                    "lor], \r\n            T.content_text_size AS [skins.content_text_size], \r\n        " +
                    "    T.server_timestamp AS [skins.server_timestamp], \r\n            True AS _from0" +
                    "\r\n        FROM DALContext.skins AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.themes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.themes", @"
    SELECT VALUE -- Constructing themes
        [DAL.Store.themes](T1.themes_id, T1.[themes.theme_name], T1.[themes.splashscreen_mode], T1.[themes.splashscreen_url], T1.[themes.gadgets_mode], T1.themes_description, T1.[themes.app_id], T1.[themes.navigation_bar_bg_url], T1.[themes.content_bg_url], T1.[themes.server_timestamp])
    FROM (
        SELECT 
            T.id AS themes_id, 
            T.theme_name AS [themes.theme_name], 
            T.splashscreen_mode AS [themes.splashscreen_mode], 
            T.splashscreen_url AS [themes.splashscreen_url], 
            T.gadgets_mode AS [themes.gadgets_mode], 
            T.description AS themes_description, 
            T.app_id AS [themes.app_id], 
            T.navigation_bar_bg_url AS [themes.navigation_bar_bg_url], 
            T.content_bg_url AS [themes.content_bg_url], 
            T.server_timestamp AS [themes.server_timestamp], 
            True AS _from0
        FROM DALContext.themes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.user_owner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.user_owner", @"
    SELECT VALUE -- Constructing user_owner
        [DAL.Store.user_owner](T1.[user_owner.id], T1.[user_owner.user_id], T1.[user_owner.franchaser_id], T1.[user_owner.first_name], T1.[user_owner.last_name], T1.[user_owner.telephone], T1.[user_owner.email])
    FROM (
        SELECT 
            T.id AS [user_owner.id], 
            T.user_id AS [user_owner.user_id], 
            T.franchaser_id AS [user_owner.franchaser_id], 
            T.first_name AS [user_owner.first_name], 
            T.last_name AS [user_owner.last_name], 
            T.telephone AS [user_owner.telephone], 
            T.email AS [user_owner.email], 
            True AS _from0
        FROM DALContext.user_owner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.application
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.application", @"
    SELECT VALUE -- Constructing application
        [DAL.application](T1.application_id, T1.[application.app_name], T1.[application.is_active], T1.[application.demo_password], T1.[application.owner_id], T1.[application.server_timestamp])
    FROM (
        SELECT 
            T.id AS application_id, 
            T.app_name AS [application.app_name], 
            T.is_active AS [application.is_active], 
            T.demo_password AS [application.demo_password], 
            T.owner_id AS [application.owner_id], 
            T.server_timestamp AS [application.server_timestamp], 
            True AS _from0
        FROM DALStoreContainer.application AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.skins
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.skins", "\r\n    SELECT VALUE -- Constructing skins\r\n        [DAL.skins](T1.skins_id, T1.[sk" +
                    "ins.app_id], T1.[skins.skin_name], T1.[skins.application_color], T1.[skins.appli" +
                    "cation_bg_color_start], T1.[skins.application_bg_color_end], T1.[skins.applicati" +
                    "on_text_color], T1.[skins.list_bg_color_start], T1.[skins.list_bg_color_end], T1" +
                    ".[skins.list_alt_bg_color_start], T1.[skins.list_alt_bg_color_end], T1.[skins.li" +
                    "st_bg_opacity], T1.[skins.list_text_color], T1.[skins.list_alt_text_color], T1.[" +
                    "skins.content_bg_color_start], T1.[skins.content_bg_color_end], T1.[skins.conten" +
                    "t_text_color], T1.[skins.content_text_size], T1.[skins.server_timestamp])\r\n    F" +
                    "ROM (\r\n        SELECT \r\n            T.id AS skins_id, \r\n            T.app_id AS " +
                    "[skins.app_id], \r\n            T.skin_name AS [skins.skin_name], \r\n            T." +
                    "application_color AS [skins.application_color], \r\n            T.application_bg_c" +
                    "olor_start AS [skins.application_bg_color_start], \r\n            T.application_bg" +
                    "_color_end AS [skins.application_bg_color_end], \r\n            T.application_text" +
                    "_color AS [skins.application_text_color], \r\n            T.list_bg_color_start AS" +
                    " [skins.list_bg_color_start], \r\n            T.list_bg_color_end AS [skins.list_b" +
                    "g_color_end], \r\n            T.list_alt_bg_color_start AS [skins.list_alt_bg_colo" +
                    "r_start], \r\n            T.list_alt_bg_color_end AS [skins.list_alt_bg_color_end]" +
                    ", \r\n            T.list_bg_opacity AS [skins.list_bg_opacity], \r\n            T.li" +
                    "st_text_color AS [skins.list_text_color], \r\n            T.list_alt_text_color AS" +
                    " [skins.list_alt_text_color], \r\n            T.content_bg_color_start AS [skins.c" +
                    "ontent_bg_color_start], \r\n            T.content_bg_color_end AS [skins.content_b" +
                    "g_color_end], \r\n            T.content_text_color AS [skins.content_text_color], " +
                    "\r\n            T.content_text_size AS [skins.content_text_size], \r\n            T." +
                    "server_timestamp AS [skins.server_timestamp], \r\n            True AS _from0\r\n    " +
                    "    FROM DALStoreContainer.skins AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.themes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.themes", @"
    SELECT VALUE -- Constructing themes
        [DAL.themes](T1.themes_id, T1.[themes.theme_name], T1.[themes.splashscreen_mode], T1.[themes.splashscreen_url], T1.[themes.gadgets_mode], T1.themes_description, T1.[themes.app_id], T1.[themes.navigation_bar_bg_url], T1.[themes.content_bg_url], T1.[themes.server_timestamp])
    FROM (
        SELECT 
            T.id AS themes_id, 
            T.theme_name AS [themes.theme_name], 
            T.splashscreen_mode AS [themes.splashscreen_mode], 
            T.splashscreen_url AS [themes.splashscreen_url], 
            T.gadgets_mode AS [themes.gadgets_mode], 
            T.description AS themes_description, 
            T.app_id AS [themes.app_id], 
            T.navigation_bar_bg_url AS [themes.navigation_bar_bg_url], 
            T.content_bg_url AS [themes.content_bg_url], 
            T.server_timestamp AS [themes.server_timestamp], 
            True AS _from0
        FROM DALStoreContainer.themes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.user_owner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.user_owner", @"
    SELECT VALUE -- Constructing user_owner
        [DAL.user_owner](T1.[user_owner.id], T1.[user_owner.user_id], T1.[user_owner.franchaser_id], T1.[user_owner.first_name], T1.[user_owner.last_name], T1.[user_owner.telephone], T1.[user_owner.email])
    FROM (
        SELECT 
            T.id AS [user_owner.id], 
            T.user_id AS [user_owner.user_id], 
            T.franchaser_id AS [user_owner.franchaser_id], 
            T.first_name AS [user_owner.first_name], 
            T.last_name AS [user_owner.last_name], 
            T.telephone AS [user_owner.telephone], 
            T.email AS [user_owner.email], 
            True AS _from0
        FROM DALStoreContainer.user_owner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.ProfileData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.ProfileData", @"
    SELECT VALUE -- Constructing ProfileData
        [DAL.Store.ProfileData](T1.ProfileData_pId, T1.ProfileData_Profile, T1.ProfileData_Name, T1.ProfileData_ValueString, T1.ProfileData_ValueBinary)
    FROM (
        SELECT 
            T.pId AS ProfileData_pId, 
            T.Profile AS ProfileData_Profile, 
            T.Name AS ProfileData_Name, 
            T.ValueString AS ProfileData_ValueString, 
            T.ValueBinary AS ProfileData_ValueBinary, 
            True AS _from0
        FROM DALContext.ProfileData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.Profiles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.Profiles", @"
    SELECT VALUE -- Constructing Profiles
        [DAL.Store.Profiles](T1.Profiles_pId, T1.Profiles_Username, T1.Profiles_ApplicationName, T1.Profiles_IsAnonymous, T1.Profiles_LastActivityDate, T1.Profiles_LastUpdatedDate)
    FROM (
        SELECT 
            T.pId AS Profiles_pId, 
            T.Username AS Profiles_Username, 
            T.ApplicationName AS Profiles_ApplicationName, 
            T.IsAnonymous AS Profiles_IsAnonymous, 
            T.LastActivityDate AS Profiles_LastActivityDate, 
            T.LastUpdatedDate AS Profiles_LastUpdatedDate, 
            True AS _from0
        FROM DALContext.Profiles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.ProfileData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.ProfileData", @"
    SELECT VALUE -- Constructing ProfileData
        [DAL.ProfileData](T1.ProfileData_pId, T1.ProfileData_Profile, T1.ProfileData_Name, T1.ProfileData_ValueString, T1.ProfileData_ValueBinary)
    FROM (
        SELECT 
            T.pId AS ProfileData_pId, 
            T.Profile AS ProfileData_Profile, 
            T.Name AS ProfileData_Name, 
            T.ValueString AS ProfileData_ValueString, 
            T.ValueBinary AS ProfileData_ValueBinary, 
            True AS _from0
        FROM DALStoreContainer.ProfileData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.Profiles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.Profiles", @"
    SELECT VALUE -- Constructing Profiles
        [DAL.Profiles](T1.Profiles_pId, T1.Profiles_Username, T1.Profiles_ApplicationName, T1.Profiles_IsAnonymous, T1.Profiles_LastActivityDate, T1.Profiles_LastUpdatedDate)
    FROM (
        SELECT 
            T.pId AS Profiles_pId, 
            T.Username AS Profiles_Username, 
            T.ApplicationName AS Profiles_ApplicationName, 
            T.IsAnonymous AS Profiles_IsAnonymous, 
            T.LastActivityDate AS Profiles_LastActivityDate, 
            T.LastUpdatedDate AS Profiles_LastUpdatedDate, 
            True AS _from0
        FROM DALStoreContainer.Profiles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.Roles", @"
    SELECT VALUE -- Constructing Roles
        [DAL.Store.Roles](T1.Roles_Rolename, T1.Roles_ApplicationName)
    FROM (
        SELECT 
            T.Rolename AS Roles_Rolename, 
            T.ApplicationName AS Roles_ApplicationName, 
            True AS _from0
        FROM DALContext.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.UsersInRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.UsersInRoles", @"
    SELECT VALUE -- Constructing UsersInRoles
        [DAL.Store.UsersInRoles](T1.UsersInRoles_Username, T1.UsersInRoles_Rolename, T1.UsersInRoles_ApplicationName)
    FROM (
        SELECT 
            T.Username AS UsersInRoles_Username, 
            T.Rolename AS UsersInRoles_Rolename, 
            T.ApplicationName AS UsersInRoles_ApplicationName, 
            True AS _from0
        FROM DALContext.UsersInRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.Roles", @"
    SELECT VALUE -- Constructing Roles
        [DAL.Roles](T1.Roles_Rolename, T1.Roles_ApplicationName)
    FROM (
        SELECT 
            T.Rolename AS Roles_Rolename, 
            T.ApplicationName AS Roles_ApplicationName, 
            True AS _from0
        FROM DALStoreContainer.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.UsersInRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.UsersInRoles", @"
    SELECT VALUE -- Constructing UsersInRoles
        [DAL.UsersInRoles](T1.UsersInRoles_Username, T1.UsersInRoles_Rolename, T1.UsersInRoles_ApplicationName)
    FROM (
        SELECT 
            T.Username AS UsersInRoles_Username, 
            T.Rolename AS UsersInRoles_Rolename, 
            T.ApplicationName AS UsersInRoles_ApplicationName, 
            True AS _from0
        FROM DALStoreContainer.UsersInRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.Sessions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.Sessions", @"
    SELECT VALUE -- Constructing Sessions
        [DAL.Store.Sessions](T1.Sessions_SessionId, T1.Sessions_ApplicationName, T1.Sessions_Created, T1.Sessions_Expires, T1.Sessions_Timeout, T1.Sessions_Locked, T1.Sessions_LockId, T1.Sessions_LockDate, T1.Sessions_Data, T1.Sessions_Flags)
    FROM (
        SELECT 
            T.SessionId AS Sessions_SessionId, 
            T.ApplicationName AS Sessions_ApplicationName, 
            T.Created AS Sessions_Created, 
            T.Expires AS Sessions_Expires, 
            T.Timeout AS Sessions_Timeout, 
            T.Locked AS Sessions_Locked, 
            T.LockId AS Sessions_LockId, 
            T.LockDate AS Sessions_LockDate, 
            T.Data AS Sessions_Data, 
            T.Flags AS Sessions_Flags, 
            True AS _from0
        FROM DALContext.Sessions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.Sessions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.Sessions", @"
    SELECT VALUE -- Constructing Sessions
        [DAL.Sessions](T1.Sessions_SessionId, T1.Sessions_ApplicationName, T1.Sessions_Created, T1.Sessions_Expires, T1.Sessions_Timeout, T1.Sessions_Locked, T1.Sessions_LockId, T1.Sessions_LockDate, T1.Sessions_Data, T1.Sessions_Flags)
    FROM (
        SELECT 
            T.SessionId AS Sessions_SessionId, 
            T.ApplicationName AS Sessions_ApplicationName, 
            T.Created AS Sessions_Created, 
            T.Expires AS Sessions_Expires, 
            T.Timeout AS Sessions_Timeout, 
            T.Locked AS Sessions_Locked, 
            T.LockId AS Sessions_LockId, 
            T.LockDate AS Sessions_LockDate, 
            T.Data AS Sessions_Data, 
            T.Flags AS Sessions_Flags, 
            True AS _from0
        FROM DALStoreContainer.Sessions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.user_franchaser
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.user_franchaser", @"
    SELECT VALUE -- Constructing user_franchaser
        [DAL.Store.user_franchaser](T1.[user_franchaser.id], T1.[user_franchaser.user_id], T1.[user_franchaser.first_name], T1.[user_franchaser.last_name], T1.[user_franchaser.company_name], T1.[user_franchaser.telephone], T1.[user_franchaser.email], T1.[user_franchaser.domain_name], T1.[user_franchaser.country])
    FROM (
        SELECT 
            T.id AS [user_franchaser.id], 
            T.user_id AS [user_franchaser.user_id], 
            T.first_name AS [user_franchaser.first_name], 
            T.last_name AS [user_franchaser.last_name], 
            T.company_name AS [user_franchaser.company_name], 
            T.telephone AS [user_franchaser.telephone], 
            T.email AS [user_franchaser.email], 
            T.domain_name AS [user_franchaser.domain_name], 
            T.country AS [user_franchaser.country], 
            True AS _from0
        FROM DALContext.user_franchaser AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.user_franchaser
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.user_franchaser", @"
    SELECT VALUE -- Constructing user_franchaser
        [DAL.user_franchaser](T1.[user_franchaser.id], T1.[user_franchaser.user_id], T1.[user_franchaser.first_name], T1.[user_franchaser.last_name], T1.[user_franchaser.company_name], T1.[user_franchaser.telephone], T1.[user_franchaser.email], T1.[user_franchaser.domain_name], T1.[user_franchaser.country])
    FROM (
        SELECT 
            T.id AS [user_franchaser.id], 
            T.user_id AS [user_franchaser.user_id], 
            T.first_name AS [user_franchaser.first_name], 
            T.last_name AS [user_franchaser.last_name], 
            T.company_name AS [user_franchaser.company_name], 
            T.telephone AS [user_franchaser.telephone], 
            T.email AS [user_franchaser.email], 
            T.domain_name AS [user_franchaser.domain_name], 
            T.country AS [user_franchaser.country], 
            True AS _from0
        FROM DALStoreContainer.user_franchaser AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALStoreContainer.Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALStoreContainer.Users", "\r\n    SELECT VALUE -- Constructing Users\r\n        [DAL.Store.Users](T1.Users_pId," +
                    " T1.Users_Username, T1.Users_ApplicationName, T1.Users_Email, T1.Users_Comment, " +
                    "T1.Users_Password, T1.Users_PasswordQuestion, T1.Users_PasswordAnswer, T1.Users_" +
                    "IsApproved, T1.Users_LastActivityDate, T1.Users_LastLoginDate, T1.Users_LastPass" +
                    "wordChangedDate, T1.Users_CreationDate, T1.Users_IsOnLine, T1.Users_IsLockedOut," +
                    " T1.Users_LastLockedOutDate, T1.Users_FailedPasswordAttemptCount, T1.Users_Faile" +
                    "dPasswordAttemptWindowStart, T1.Users_FailedPasswordAnswerAttemptCount, T1.Users" +
                    "_FailedPasswordAnswerAttemptWindowStart)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.pId AS Users_pId, \r\n            T.Username AS Users_Username, \r\n           " +
                    " T.ApplicationName AS Users_ApplicationName, \r\n            T.Email AS Users_Emai" +
                    "l, \r\n            T.Comment AS Users_Comment, \r\n            T.Password AS Users_P" +
                    "assword, \r\n            T.PasswordQuestion AS Users_PasswordQuestion, \r\n         " +
                    "   T.PasswordAnswer AS Users_PasswordAnswer, \r\n            T.IsApproved AS Users" +
                    "_IsApproved, \r\n            T.LastActivityDate AS Users_LastActivityDate, \r\n     " +
                    "       T.LastLoginDate AS Users_LastLoginDate, \r\n            T.LastPasswordChang" +
                    "edDate AS Users_LastPasswordChangedDate, \r\n            T.CreationDate AS Users_C" +
                    "reationDate, \r\n            T.IsOnLine AS Users_IsOnLine, \r\n            T.IsLocke" +
                    "dOut AS Users_IsLockedOut, \r\n            T.LastLockedOutDate AS Users_LastLocked" +
                    "OutDate, \r\n            T.FailedPasswordAttemptCount AS Users_FailedPasswordAttem" +
                    "ptCount, \r\n            T.FailedPasswordAttemptWindowStart AS Users_FailedPasswor" +
                    "dAttemptWindowStart, \r\n            T.FailedPasswordAnswerAttemptCount AS Users_F" +
                    "ailedPasswordAnswerAttemptCount, \r\n            T.FailedPasswordAnswerAttemptWind" +
                    "owStart AS Users_FailedPasswordAnswerAttemptWindowStart, \r\n            True AS _" +
                    "from0\r\n        FROM DALContext.Users AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для DALContext.Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DALContext.Users", "\r\n    SELECT VALUE -- Constructing Users\r\n        [DAL.Users](T1.Users_pId, T1.Us" +
                    "ers_Username, T1.Users_ApplicationName, T1.Users_Email, T1.Users_Comment, T1.Use" +
                    "rs_Password, T1.Users_PasswordQuestion, T1.Users_PasswordAnswer, T1.Users_IsAppr" +
                    "oved, T1.Users_LastActivityDate, T1.Users_LastLoginDate, T1.Users_LastPasswordCh" +
                    "angedDate, T1.Users_CreationDate, T1.Users_IsOnLine, T1.Users_IsLockedOut, T1.Us" +
                    "ers_LastLockedOutDate, T1.Users_FailedPasswordAttemptCount, T1.Users_FailedPassw" +
                    "ordAttemptWindowStart, T1.Users_FailedPasswordAnswerAttemptCount, T1.Users_Faile" +
                    "dPasswordAnswerAttemptWindowStart)\r\n    FROM (\r\n        SELECT \r\n            T.p" +
                    "Id AS Users_pId, \r\n            T.Username AS Users_Username, \r\n            T.App" +
                    "licationName AS Users_ApplicationName, \r\n            T.Email AS Users_Email, \r\n " +
                    "           T.Comment AS Users_Comment, \r\n            T.Password AS Users_Passwor" +
                    "d, \r\n            T.PasswordQuestion AS Users_PasswordQuestion, \r\n            T.P" +
                    "asswordAnswer AS Users_PasswordAnswer, \r\n            T.IsApproved AS Users_IsApp" +
                    "roved, \r\n            T.LastActivityDate AS Users_LastActivityDate, \r\n           " +
                    " T.LastLoginDate AS Users_LastLoginDate, \r\n            T.LastPasswordChangedDate" +
                    " AS Users_LastPasswordChangedDate, \r\n            T.CreationDate AS Users_Creatio" +
                    "nDate, \r\n            T.IsOnLine AS Users_IsOnLine, \r\n            T.IsLockedOut A" +
                    "S Users_IsLockedOut, \r\n            T.LastLockedOutDate AS Users_LastLockedOutDat" +
                    "e, \r\n            T.FailedPasswordAttemptCount AS Users_FailedPasswordAttemptCoun" +
                    "t, \r\n            T.FailedPasswordAttemptWindowStart AS Users_FailedPasswordAttem" +
                    "ptWindowStart, \r\n            T.FailedPasswordAnswerAttemptCount AS Users_FailedP" +
                    "asswordAnswerAttemptCount, \r\n            T.FailedPasswordAnswerAttemptWindowStar" +
                    "t AS Users_FailedPasswordAnswerAttemptWindowStart, \r\n            True AS _from0\r" +
                    "\n        FROM DALStoreContainer.Users AS T\r\n    ) AS T1");
        }
    }
}
